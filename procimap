#! /usr/bin/perl
#
# procimap - era Thu Dec 16 09:45:54 2005
# Process IMAP folder using Procmail
#
# Based on http://imapassassin.sourceforge.net/ -- forked && hacked extensively
#
# CVS version information in $CVSid below

######## TODO: finish pod
######## TODO: --verbose (currently a no-op)
######## TODO: --single-run
######## TODO: --dump-config
######## TODO: verbose diagnostics
######## TODO: more debugging hooks
######## TODO: make GroupAccessOK properly configurable

use strict;
use warnings;

use POSIX ":sys_wait_h";
use Getopt::Long;

umask 077;

our $VERSION = 0.01;			######## TODO: update for new version
our $CVSid = '$Id: procimap,v 1.8 2005-12-28 19:45:57 era Exp $';
our $me = $0;
$me =~ s,.*/,,;

# Whether group read/write access to configuration file should be tolerated
######## FIXME: make this an installation-time preference, or something
my $GroupAccessOK = 0;			######## FIXME: currently hardcoded

######## FIXME: temporary
$GroupAccessOK = 1;			######## FIXME: DEBUG


# Parse options

my %Conf = ();

my $Help = "$me - sort IMAP mailbox using procmail - version $VERSION\n";
{
  my $pod = <<'=cut';

=head1 NAME

procimap - sort IMAP mailbox using procmail

=head1 SYNOPSIS

B<procimap> I<options ...>

=head1 DESCRIPTION

B<procimap> provides a facility for applying Procmail recipes
to a remote IMAP mailbox.

Due to the nature of IMAP, some concepts of Procmail
work quite differently in this setting.
These issues are described in more detail below in L<|Procmail Recipes>.


=head2 Options

B<procimap> accepts the following options.
Each is listed with its short form (when available) first,
followed by the equivalent long option,
followed by arguments, if any.

=over 5

=item B<--server> I<servername>

=for Getopt::Long
s server =s Specify which IMAP server to connect to

Connect to the IMAP server I<servername>.


=item B<--user> I<username>

=for Getopt::Long
u user =s User account name on IMAP server

Log on on the specified IMAP server as I<usrename>.


=item B<--password> I<password>

=for Getopt::Long
p password =s Password for IMAP server (careful!)

Use I<password> for logging in on the IMAP server.

You should take extreme caution with this option.
It is only really meant for debugging.
On a multi-user system, anybody can see the
values of the options you pass to your programs
in a simple L<ps(1)> listing.


=item B <--expunge>

=for Getopt::Long
x  expunge !  Expunge deleted messages when disconnecting

By default, B<procimap> leaves deleted messages on the server;
they are only marked as deleted.
But if you enable this option, deleted messages will be expunged
at the end of the session.

Use this option with caution;
expunged messages cannot be recovered.


=item B <--delay> I<n>

=for Getopt::Long
d  delay  =i  Delay this many seconds between reconnects

Specify, in seconds, how long to delay before reconnecting to the server.

The default delay is 60 seconds.


=item B<--maxdelay> I<n>

=for Getopt::Long
- maxdelay =i  Maximum delay when server is unavailable

Normally, the delay between reconnects is simply
whatever is specified in the B<delay> parameter.
However, if the server is unavailable when a reconnect is attempted,
the program will delay again, progressively making
each delay longer until it reaches this value.

The default maximum delay is 600 seconds (10 minutes).


=item B<--statedir> I<directory>

=for Getopt::Long
-  statedir =s  Directory to use for state files

B<procimap> maintains state information between runs
in the specified directory.
This is also where the log file ends up by default.

The default state directory is F<~/.procimap>


=item B<--pidfile> I<file>

=for Getopt::Long
- pidfile =s    File to use for storing PID

B<procimap> needs to keep track of its own process ID (PID)
to be useful as a background program.

By default, the process ID is saved in F<procimap.pid>.

Relative file names are interpreted relative to the I<statedir>.


=item B<--midfile> I<file>

=for Getopt::Long
- midfile =s    File to use for storing latest MID

B<procimap> needs to keep track of which messages it has seen.

By default, the index number of the newest message B<procimap>
has already processed is saved in F<procimap.mid>.

Relative file names are interpreted relative to the I<statedir>.


=item B<--logfile> I<file>

=for Getopt::Long
l logfile =s  Redirect log output to file

By default, B<procimap> prints logging information to standard error.
These log messages can be redirected to a file with this directive.

Relative file names are interpreted relative to the current directory.


=item B<-c> B<--config> I<file>

=for Getopt::Long
c config  =s  Use an alternative configuration file

Use I<file> as the configuration file
instead of F<~/.procimap/procimap.conf>.


=item B<-V> B<--verbose>

=for Getopt::Long
V verbose !  Enable verbose diagnostics

Enable verbose diagnostics


=item B<-v> B<--version>

=for Getopt::Long
v version !  Print version number and exit

Print version number and exit


=item B<-h> B<--help>

=for Getopt::Long
h help    !  Print this short help message and exit

Print a short help message and exit


=back


=head2 Configuration File Directives

In addition to the options listed above,
B<procimap> can read options from a configuration file.
All of the options listed above can be specified
in the configuration file as well
(except for the ones which only make sense interactively,
i.e. B<version>, B<help>, and, for unrelated reasons, B<config>).
Options specified on the command line
take precedence over the directives in the configuration file.
The syntax is simple; one directive per line,
keyword followed by value, separated by whitespace.
Leading and trailing whitespace is trimmed.


=cut

  ######## FIXME: use Pod::Usage instead once it works more like this
  my (@options);
  local $^A = "";
  while ($pod =~ m/^=for Getopt::Long\s*(?:\n\s*)*\n(.*)\n\s*\n/mg) {
    my $option = $1;
    if ($option =~ /^\s*(\S+)\s+(\S+)\s+(\S+)\s+(.*?)\s*$/) {
      my ($short, $long, $type, $desc) = ($1, $2, $3, $4);
      $short = "" if ($short eq "-");
     formline <<'________HERE',
  @<<--@<<<<<<<<< ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
       ~          ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
       ~          ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
       ~          ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
       ~          ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
       ~          ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
________HERE
	 ($short ? "-$short|" : "   "), $long,
	     $desc, $desc, $desc, $desc, $desc, $desc;
      push @options, "$long|$short$type";
    }
    else {
      die "$me: Internal error: $1\n";
    }
  }
  die "$0: Internal error: no options defined\n" unless @options;

  $Help .= $^A;

  GetOptions (\%Conf, @options) || exit 2;

  if ($Conf{help}) {
    print $Help;
    exit 1;
  }

  if ($Conf{version}) {
    print "$me $VERSION ($CVSid)\n";
    exit 0;
  }
}


# Read in configuration file

$Conf{statedir_default} = "$ENV{HOME}/.procimap";
$Conf{config} ||= "$Conf{statedir_default}/procimap.conf";

{
  ######## FIXME: this is awfully U*x-centric; "use filetest" instead?
  my ($readablemask, $writablemask) =
      map { $_ & ($GroupAccessOK ? 007 : 077) } (044, 022);

  my @stat = stat ($Conf{config})
      or die "$me: Could not stat $Conf{config}: $!\n";
  ######## FIXME: make the diagnostic more precise
  die "$me: configuration file $Conf{config} is group/world readable\n"
      if ($stat[2] & $readablemask);
  die "$me: configuration file $Conf{config} is group/world writable\n"
      if ($stat[2] & $writablemask);
}


open CONF,$Conf{config}
    || die "$me: Could not open $Conf{config}: $!\n";
while (my $line = <CONF>)
{
  next if ($line =~ /^\s*(?:$|\#)/);
  unless ($line =~ m/^(\S+)\s+(\S.*?)\s*$/)
  {
    die "$me: $Conf{config}:$.: Invalid directive $_";
  }
  ######## TODO: warnings for unsupported directives
  my ($key,$value) = (lc($1), $2);
  $Conf{$key} = $value;
}
close CONF;


$Conf{statedir} ||= $Conf{statedir_default};
$Conf{pidfile} ||= "procimap.pid";
$Conf{midfile} ||= "procimap.mid";

# Resolve ~/ to $ENV{HOME}/

$Conf{statedir} =~ s%^~%$ENV{HOME}%;
$Conf{pidfile} =~ s%^~/%$ENV{HOME}/%;
$Conf{midfile} =~ s%^~/%$ENV{HOME}/%;
$Conf{logfile} =~ s%^~/%$ENV{HOME}/%;

# Relative paths are interpreted as relative to $Conf{statedir}
# except explicit ./filename

$Conf{pidfile} =~ s%^([^/,]|\.[^/])%$Conf{statedir}$1%;
$Conf{midfile} =~ s%^([^/.]|\.[^/])%$Conf{statedir}$1%;

######## FIXME: debugging location; update for production
$Conf{procmailrc} ||= "procimap.rc";

$Conf{delay} ||= 60;
$Conf{maxdelay} ||= 600;

die "$me: No server defined\n" unless $Conf{server};
die "$me: No user name defined\n" unless $Conf{user};
die "$me: No password defined\n" unless $Conf{password};


# Open the log file

open (LOG, defined $Conf{logfile} ? ">>$Conf{logfile}" : ">&STDERR")
    ######## FIXME: diagnostics are wrong when no logfile is defined
    || die "$me: Could not open $Conf{logfile} for writing: $!\n";
autoflush LOG 1;
&log("startup");


unless (defined $Conf{expunge}) {
  &log("expunge preference not explicitly set; defaulting to 0");
  $Conf{expunge} = 0;
}

if ($Conf{expunge} =~ /^(?:no?|off|x|false)$/i) {
  &log("Configuration file 'expunge' directive interpreted as 0 (false)");
  $Conf{expunge} = 0;
} elsif ($Conf{expunge} =~ /^(?:[^01]|[01].)/) {
  &log("Configuration file 'expunge' directive interpreted as " .
       $Conf{expunge} ? "1 (true)" : "0 (false)");
}


# Catch signals

$SIG{TERM} = $SIG{INT} = \&catch_zap;

# See if PID mentioned in PID file (if any) is still around

if (-e $Conf{pidfile}) {
  open  PIDFILE,"$Conf{pidfile}"
      || die "$me: Could not open $Conf{pidfile}: $!\n";
  my $OldPID = <PIDFILE>;
  chomp $OldPID;
  close PIDFILE;

  my $Group = getpgrp $OldPID;
  if ($Group > 0) {
    exit;
  }
}

my $PrevMID = 0;
if (-e $Conf{midfile}) {
  open  MIDFILE,"$Conf{midfile}"
      || die "$me: Could not open $Conf{midfile}: $!\n";
  $PrevMID = <MIDFILE>;
  chomp $PrevMID;
  close MIDFILE;
}
my $LastMID = $PrevMID;

# Write new PID file

open (PIDFILE,">$Conf{pidfile}")
    or die "$me: Could not open $Conf{pidfile} for writing: $!\n";
print PIDFILE $$,"\n";
close PIDFILE;


#use Mail::IMAPClient 2.0; # Version >= 2.0 required for $@
use Mail::IMAPClient;	   # ... but 2.1.4 has non-numeric version )-:

# Set up connection to IMAP

#print "Inbox='$INBOX' SpamFolder='$SpamFolder' server='$Server' user='$User' password='$Password' delay='$Delay'";

my $IMAP = Mail::IMAPClient -> new (Server   => $Conf{server},
                                    User     => $Conf{user},
                                    Password => $Conf{password})
    or die "$me: Connection to $Conf{user}\@$Conf{server} failed: $@\n";
$IMAP -> select($Conf{inbox});
$IMAP->Peek(1);

my %Filtered = (); # Hash of already checked sequence #'s

while (1) {
  ######## TODO: optimize away some of the sorting?
  my @MIDs   = sort numerically $IMAP -> unseen();    # Unread message ID's
  my $MID;
  my $Expunge = 0;			# Whether to do an expunge when done
  foreach $MID (@MIDs) {
    if (!$Filtered{$MID} && $MID > $PrevMID) {
      $Filtered{$MID} = 1;
      $LastMID = $MID;

      # Get message from IMAP and feed to procmail. Retrieve result.

      my $Message = $IMAP -> message_string($MID);
      my ($ResultAction, $NewMessage) = procmail($Message);
      &log(" MID: $MID result: $ResultAction");
      if ($ResultAction =~ /^move (.*)/) {

	# Make copy in new folder; delete original
	######## TODO: maybe add flags and timestamp of original message
        my $AppendStatus = $IMAP->append_string($Conf{spamfolder},$NewMessage);
        if ($AppendStatus) {
          $IMAP->set_flag("Seen", $MID);
          $IMAP -> delete_message($MID);
	  $Expunge = 1 if $Conf{expunge};
        } else {
          &log("Error moving spam message!");
        }
      }
      &cleanupchildren;
    }
  }
  if ($Expunge) {
    $IMAP->expunge();
  }


  # Sleep and reconnect to server.
  # Use scalable backoff if server is unavailable.

  $IMAP = $IMAP -> disconnect();
  my $connected;
  my $delayTime = $Conf{delay};
  do {
    sleep $delayTime;
    $delayTime *= 2;
    if ($delayTime > $Conf{maxdelay}) {
      $delayTime = $Conf{maxdelay};
    }
    $connected = $IMAP -> connect();
  }
  while (!$connected);

  $IMAP -> select($Conf{inbox});
}

sub catch_zap { # Orderly shutdown, remove PID file
  unlink $Conf{pidfile};
  open (MIDFILE,">$Conf{midfile}")
      or die "Could not open $Conf{midfile} for writing: $!\n";
  print MIDFILE $LastMID,"\n";
  close MIDFILE;

  &log("shutdown");

  close LOG;

  die "Exiting IMAPAssassin.\n";
}

sub log  { #print to the log file
  my $timestamp = localtime time;
  my $msg = shift;
  print LOG "$timestamp - $msg\n"
}

sub numerically {$a <=> $b;}

sub cleanupchildren {
  1 while (my $kid = waitpid(-1,&WNOHANG) > 0);
}



use Socket;
ue IO::Handle;

sub procmail {
  my ($message) = @_;

  unless (socketpair (PROCMAIL, PARENT, AF_UNIX, SOCK_STREAM, PF_UNSPEC)) {
    &log("socketpair failed: $!");
    return undef;
  }

  PROCMAIL->autoflush(1);
  PARENT->autoflush(1);

  my $pid;
  if ($pid = fork()) {
    close PARENT;
    print PROCMAIL $message;
    my $resultline = <PROCMAIL>;
    my $result;
    if ($resultline =~ /^X-ProcIMAP:\s+(.*)/) {
      $result = $1;
    }
    # else, $resultline was part of message; glue it back while reading rest
    my $message = join ("", $result ? "" : $resultline, <PROCMAIL>);
    close PROCMAIL;
    waitpid($pid, 0);
    ######## FIXME: not necessarily useful?
    &log("procmail's exit status: $?");
    return ($result || undef, $message);
  } else {
    unless (defined $pid) {
      &log("Cannot fork: $!");
      return undef;
    }
    close PROCMAIL;
    close STDIN;
    close STDOUT;
    close STDERR;
    open (STDIN,  "<&PARENT") || die "Could not dup procmail's STDIN: $!\n";
    open (STDOUT, ">&PARENT") || die "Could not dup procmail's STDOUT: $!\n";
    open (STDERR, ">&LOG")    || die "Could not dup procmail's STDERR: $!\n";
    ######## TODO: maybe add VAR=value assignments for PROCIMAPRC= etc
    exec ("procmail", "-m", $Conf{procmailrc})
	|| &log("Exec failed: $!");
    return undef;
  }
}
